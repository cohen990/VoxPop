@model List<Site.Storage.Models.CommentEntity>
@using Site.Controllers
@using Site.Models
@using Site.Services
@using Site.Storage.Models;

@section MetaTags
{
    @Html.Partial("_DefaultMetaTags")
}

@{
    Layout = "";
}
@if (@Model.Select(x => x.PollOptionKey).Count() != 0)
{
    <div class="comment-box comment-box-main">
        <h1 class="comment-box-title">
            Voter
            <a href="~/Stories/Comment/@Html.Raw(ViewBag.BlogAuthID)/@Html.Raw(ViewBag.BlogID)" class="comment-box-title-link">Comment</a>s
        </h1>
        @if (Model.Where(x => x.AmIAReply == false).Select(x => x.PollOptionKey).Distinct().Count() == 2)
        {
            var Op1 = Model.Where(x => x.AmIAReply == false).Select(x => x.PollOptionKey).Distinct().First();
            var Op1Index = Model.Where(x => x.AmIAReply == false).Select(x => x.PollOptionIndex).Distinct().First();
            var decodedOp1 = HttpUtility.UrlDecode(Op1).Trim();
            var Op2 = Model.Where(x => x.AmIAReply == false).Select(x => x.PollOptionKey).Distinct().Last();
            var Op2Index = Model.Where(x => x.AmIAReply == false).Select(x => x.PollOptionIndex).Distinct().Last();
            var decodedOp2 = HttpUtility.UrlDecode(Op2).Trim();

            <div class="comment-box-sbs-1">

                <div id="comment-box-@Op1Index" class="story-votebuttons-modal-option-box story-votebuttons-modal-option-box-@Op1Index comment-box-sbs-ops-boxes">
                    <h2 id="comment-option-@Op1Index" class="story-votebuttons-modal-option">
                        @decodedOp1
                    </h2>
                    <div id="comment-box-colour-@Op1Index" class="story-votebuttons-modal-box-colour story-votebuttons-modal-box-colour-@Op1Index comment-box-sbs-ops-colours"></div>
                </div>
                @foreach (var voteComment in Model.Select((value, i) => new { i, value }))
                {
                    if (@voteComment.value.PollOptionKey == Op1 && voteComment.value.AmIAReply == false)
                    {
                        <div class="comment-box comment-box-each ">
                            <div class="comment-box-user-pic"></div>
                            <div class="comment-box-sbs-commenter">
                                @Html.ActionLink(@voteComment.value.Commenter, "AuthorStories", new { AuthUn = @voteComment.value.CommenterUsername, Auth = voteComment.value.Commenter }, null)
                                <div class="comment-box-sbs-datetime">
                                    @StoriesController.GetPrettyDate(voteComment.value.Timestamp)
                                </div>
                            </div>
                            <p class="comment-box-comment-text">@voteComment.value.Comment</p>
                            <div class="comment-box-reply-button">
                                @Html.ActionLink(" ", "StoriesComment", new { replyId = voteComment.value.CommentId, replyee = voteComment.value.Commenter, replyeeUn = voteComment.value.CommenterUsername, replyeesComment = voteComment.value.Comment }, new { @class = "comment-box-reply-button-pic" })
                                @Html.ActionLink("REPLY", "StoriesComment", new { replyId = voteComment.value.CommentId, replyee = voteComment.value.Commenter, replyeeUn = voteComment.value.CommenterUsername, replyeesComment = voteComment.value.Comment }, null)
                            </div>
                        </div>
                        foreach (var replyComment in Model.OrderBy(x => x.RowKey))
                        {
                            if (replyComment.CommentId == Model.Select(x => x.CommentId).ElementAt(voteComment.i) && replyComment.AmIAReply == true)
                            {
                                <div class="comment-box comment-box-reply">
                                    @{var decodedReplyOp = HttpUtility.UrlDecode(replyComment.PollOptionKey);}
                                    <div class="comment-box-user-pic comment-box-user-pic-replier"></div>
                                    <div class="comment-box-sbs-commenter comment-box-reply-sbs-commenter">
                                        <div class="comment-box-reply-sbs-commenter-inner">
                                            @Html.ActionLink(@replyComment.Commenter, "AuthorStories", new { AuthUn = @replyComment.CommenterUsername, Auth = replyComment.Commenter }, null)
                                            voted
                                        </div>
                                        <div id="comment-box-reply-@replyComment.PollOptionIndex" class="story-votebuttons-modal-option-box story-votebuttons-modal-option-box-@replyComment.PollOptionIndex comment-box-reply-ops-boxes">
                                            @if (decodedReplyOp.Length <= 14)
                                            {
                                                <h2 id="comment-reply-option-@replyComment.PollOptionIndex" class="story-votebuttons-modal-option comment-box-reply-ops">
                                                    @decodedReplyOp
                                                </h2>
                                            }
                                            else
                                            {
                                                <h2 id="comment-reply-option-@replyComment.PollOptionIndex" class="story-votebuttons-modal-option comment-box-reply-ops">
                                                    @decodedReplyOp.Substring(0, 14)...
                                                </h2>
                                            }
                                            <div id="comment-box-reply-colour-@replyComment.PollOptionIndex" class="story-votebuttons-modal-box-colour story-votebuttons-modal-box-colour-@replyComment.PollOptionIndex comment-box-reply-ops-colours"></div>
                                        </div>
                                    </div>
                                    <div class="comment-box-replied-to">
                                        <div class="comment-box-sbs-datetime comment-box-sbs-datetime-reply">
                                            @StoriesController.GetPrettyDate(replyComment.Timestamp)
                                        </div>
                                        <div class="comment-box-replied-to-inner">
                                            <div class="comment-box-reply-button-pic comment-box-reply-button-pic-reply"></div>
                                            @Html.ActionLink(@replyComment.WhoDidIReply, "AuthorStories", "Stories", new { AuthUn = @replyComment.WhoDidIReplyUsername, Auth = replyComment.WhoDidIReply }, null)
                                        </div>
                                    </div>
                                    <p class="comment-box-comment-text comment-box-reply-comment-text">@replyComment.Comment</p>
                                    <div class="comment-box-reply-button">
                                        @Html.ActionLink(" ", "StoriesComment", new { replyId = @replyComment.CommentId, replyee = replyComment.Commenter, replyeeUn = replyComment.CommenterUsername, replyeesComment = replyComment.Comment }, new { @class = "comment-box-reply-button-pic" })
                                        @Html.ActionLink("REPLY", "StoriesComment", new { replyId = @replyComment.CommentId, replyee = replyComment.Commenter, replyeeUn = replyComment.CommenterUsername, replyeesComment = replyComment.Comment }, null)
                                    </div>
                                </div>
                            }
                        }
                    }
                }
            </div>


            if (Model.Where(x => x.AmIAReply == false).Select(x => x.PollOptionKey).Distinct().Count() > 1)
            {
                <div class="comment-box-sbs-2">
                    <div class="comment-box-sbs-divider-icon">
                        <div class="comment-box-sbs-divider-icon-text">VS</div>
                    </div>
                    <div id="comment-box-@Op2Index" class="story-votebuttons-modal-option-box story-votebuttons-modal-option-box-@Op2Index comment-box-sbs-ops-boxes">
                        <h2 id="comment-option-@Op2Index" class="story-votebuttons-modal-option">
                            @decodedOp2
                        </h2>
                        <div id="comment-box-colour-@Op2Index" class="story-votebuttons-modal-box-colour story-votebuttons-modal-box-colour-@Op2Index comment-box-sbs-ops-colours"></div>
                    </div>
                    @foreach (var voteComment in Model.Select((value, i) => new { i, value }))
                    {

                        if (voteComment.value.PollOptionKey == Op2 && voteComment.value.AmIAReply == false)
                        {
                            <div class="comment-box comment-box-each ">
                                <div class="comment-box-user-pic"></div>
                                <div class="comment-box-sbs-commenter">
                                    @Html.ActionLink(@voteComment.value.Commenter, "AuthorStories", new { AuthUn = @voteComment.value.CommenterUsername, Auth = voteComment.value.Commenter }, null)
                                    <div class="comment-box-sbs-datetime">
                                        @StoriesController.GetPrettyDate(voteComment.value.Timestamp)
                                    </div>
                                </div>
                                <p class="comment-box-comment-text">@voteComment.value.Comment</p>
                                <div class="comment-box-reply-button">
                                    @Html.ActionLink(" ", "StoriesComment", new { replyId = voteComment.value.CommentId, replyee = voteComment.value.Commenter, replyeeUn = voteComment.value.CommenterUsername, replyeesComment = voteComment.value.Comment }, new { @class = "comment-box-reply-button-pic" })
                                    @Html.ActionLink("REPLY", "StoriesComment", new { replyId = voteComment.value.CommentId, replyee = voteComment.value.Commenter, replyeeUn = voteComment.value.CommenterUsername, replyeesComment = voteComment.value.Comment }, null)
                                </div>
                            </div>
                            foreach (var replyComment in Model.OrderBy(x => x.RowKey))
                            {
                                if (replyComment.CommentId == Model.Select(x => x.CommentId).ElementAt(voteComment.i) && replyComment.AmIAReply == true)
                                {
                                    <div class="comment-box comment-box-reply">
                                        @{var decodedReplyOp = HttpUtility.UrlDecode(replyComment.PollOptionKey);}
                                        <div class="comment-box-user-pic comment-box-user-pic-replier"></div>
                                        <div class="comment-box-sbs-commenter comment-box-reply-sbs-commenter">
                                            <div class="comment-box-reply-sbs-commenter-inner">
                                                @Html.ActionLink(@replyComment.Commenter, "AuthorStories", new { AuthUn = @replyComment.CommenterUsername, Auth = replyComment.Commenter }, null)
                                                voted
                                            </div>
                                            <div id="comment-box-reply-@replyComment.PollOptionIndex" class="story-votebuttons-modal-option-box story-votebuttons-modal-option-box-@replyComment.PollOptionIndex comment-box-reply-ops-boxes">
                                                @if (decodedReplyOp.Length <= 14)
                                                {
                                                    <h2 id="comment-reply-option-@replyComment.PollOptionIndex" class="story-votebuttons-modal-option comment-box-reply-ops">
                                                        @decodedReplyOp
                                                    </h2>
                                                }
                                                else
                                                {
                                                    <h2 id="comment-reply-option-@replyComment.PollOptionIndex" class="story-votebuttons-modal-option comment-box-reply-ops">
                                                        @decodedReplyOp.Substring(0, 14)...
                                                    </h2>
                                                }
                                                <div id="comment-box-reply-colour-@replyComment.PollOptionIndex" class="story-votebuttons-modal-box-colour story-votebuttons-modal-box-colour-@replyComment.PollOptionIndex comment-box-reply-ops-colours"></div>
                                            </div>
                                        </div>
                                        <div class="comment-box-replied-to">
                                            <div class="comment-box-replied-to-inner">
                                                <div class="comment-box-reply-button-pic comment-box-reply-button-pic-reply"></div>
                                                @Html.ActionLink(@replyComment.WhoDidIReply, "AuthorStories", "Stories", new { AuthUn = @replyComment.WhoDidIReplyUsername, Auth = replyComment.WhoDidIReply }, null)
                                            </div>
                                            <div class="comment-box-sbs-datetime comment-box-sbs-datetime-reply">
                                                @StoriesController.GetPrettyDate(replyComment.Timestamp)
                                            </div>
                                        </div>
                                        <p class="comment-box-comment-text comment-box-reply-comment-text">@replyComment.Comment</p>
                                        <div class="comment-box-reply-button">
                                            @Html.ActionLink(" ", "StoriesComment", new { replyId = @replyComment.CommentId, replyee = replyComment.Commenter, replyeeUn = replyComment.CommenterUsername, replyeesComment = replyComment.Comment }, new { @class = "comment-box-reply-button-pic" })
                                            @Html.ActionLink("REPLY", "StoriesComment", new { replyId = @replyComment.CommentId, replyee = replyComment.Commenter, replyeeUn = replyComment.CommenterUsername, replyeesComment = replyComment.Comment }, null)
                                        </div>
                                    </div>
                                }
                            }
                        }
                    }
                </div>
            }
        }

        else
        {
            foreach (var voteComment in Model.Select((value, i) => new { i, value }))
            {
                if (voteComment.value.AmIAReply == false)
                {
                    var decodedOp = HttpUtility.UrlDecode(@voteComment.value.PollOptionKey);
                    <div class="comment-box comment-box-each">
                        <div class="comment-box-user-pic"></div>
                        <div class="comment-box-sbs-commenter comment-box-reply-sbs-commenter comment-box-not-sbs-commenter">
                            <div class="comment-box-reply-sbs-commenter-inner">
                                @Html.ActionLink(@voteComment.value.Commenter, "AuthorStories", new { AuthUn = @voteComment.value.CommenterUsername, Auth = voteComment.value.Commenter }, null)
                                voted
                            </div>
                            <div id="comment-box-reply-@voteComment.value.PollOptionIndex" class="story-votebuttons-modal-option-box story-votebuttons-modal-option-box-@voteComment.value.PollOptionIndex comment-box-reply-ops-boxes">
                                @if (decodedOp.Length <= 14)
                                {
                                    <h2 id="comment-reply-option-@voteComment.value.PollOptionIndex" class="story-votebuttons-modal-option comment-box-reply-ops">
                                        @decodedOp
                                    </h2>
                                }
                                else
                                {
                                    <h2 id="comment-reply-option-@voteComment.value.PollOptionIndex" class="story-votebuttons-modal-option comment-box-reply-ops">
                                        @decodedOp.Substring(0, 14)...
                                    </h2>
                                }
                                <div id="comment-box-reply-colour-@voteComment.value.PollOptionIndex" class="story-votebuttons-modal-box-colour story-votebuttons-modal-box-colour-@voteComment.value.PollOptionIndex comment-box-reply-ops-colours"></div>
                            </div>
                        </div>
                        <div class="comment-box-sbs-datetime comment-box-not-sbs-datetime">
                            @StoriesController.GetPrettyDate(voteComment.value.Timestamp)
                        </div>
                        <p class="comment-box-comment-text comment-box-not-sbs-comment-text">@voteComment.value.Comment</p>
                        <div class="comment-box-reply-button">
                            @Html.ActionLink(" ", "StoriesComment", new { replyId = voteComment.value.CommentId, replyee = voteComment.value.Commenter, replyeeUn = voteComment.value.CommenterUsername, replyeesComment = voteComment.value.Comment }, new { @class = "comment-box-reply-button-pic" })
                            @Html.ActionLink("REPLY", "StoriesComment", new { replyId = voteComment.value.CommentId, replyee = voteComment.value.Commenter, replyeeUn = voteComment.value.CommenterUsername, replyeesComment = voteComment.value.Comment }, null)
                        </div>
                    </div>
                    foreach (var replyComment in Model.OrderBy(x => x.RowKey))
                    {
                        if (replyComment.CommentId == Model.Select(x => x.CommentId).ElementAt(voteComment.i) && replyComment.AmIAReply == true)
                        {
                            <div class="comment-box comment-box-reply">
                                @{var decodedReplyOp = HttpUtility.UrlDecode(replyComment.PollOptionKey);}
                                <div class="comment-box-user-pic comment-box-user-pic-replier"></div>
                                <div class="comment-box-sbs-commenter comment-box-reply-sbs-commenter">
                                    <div class="comment-box-reply-sbs-commenter-inner">
                                        @Html.ActionLink(@replyComment.Commenter, "AuthorStories", new { AuthUn = @replyComment.CommenterUsername, Auth = replyComment.Commenter }, null)
                                        voted
                                    </div>
                                    <div id="comment-box-reply-@replyComment.PollOptionIndex" class="story-votebuttons-modal-option-box story-votebuttons-modal-option-box-@replyComment.PollOptionIndex comment-box-reply-ops-boxes">
                                        @if (decodedReplyOp.Length <= 14)
                                        {
                                            <h2 id="comment-reply-option-@replyComment.PollOptionIndex" class="story-votebuttons-modal-option comment-box-reply-ops">
                                                @decodedReplyOp
                                            </h2>
                                        }
                                        else
                                        {
                                            <h2 id="comment-reply-option-@replyComment.PollOptionIndex" class="story-votebuttons-modal-option comment-box-reply-ops">
                                                @decodedReplyOp.Substring(0, 14)...
                                            </h2>
                                        }
                                        <div id="comment-box-reply-colour-@replyComment.PollOptionIndex" class="story-votebuttons-modal-box-colour story-votebuttons-modal-box-colour-@replyComment.PollOptionIndex comment-box-reply-ops-colours"></div>
                                    </div>
                                </div>
                                <div class="comment-box-replied-to">
                                    <div class="comment-box-sbs-datetime comment-box-sbs-datetime-reply">
                                        @StoriesController.GetPrettyDate(replyComment.Timestamp)
                                    </div>
                                    <div class="comment-box-replied-to-inner">
                                        <div class="comment-box-reply-button-pic comment-box-reply-button-pic-reply"></div>
                                        @Html.ActionLink(@replyComment.WhoDidIReply, "AuthorStories", "Stories", new { AuthUn = @replyComment.WhoDidIReplyUsername, Auth = replyComment.WhoDidIReply }, null)
                                    </div>
                                </div>
                                <p class="comment-box-comment-text comment-box-reply-comment-text">@replyComment.Comment</p>
                                <div class="comment-box-reply-button">
                                    @Html.ActionLink(" ", "StoriesComment", new { replyId = @replyComment.CommentId, replyee = replyComment.Commenter, replyeeUn = replyComment.CommenterUsername, replyeesComment = replyComment.Comment }, new { @class = "comment-box-reply-button-pic" })
                                    @Html.ActionLink("REPLY", "StoriesComment", new { replyId = @replyComment.CommentId, replyee = replyComment.Commenter, replyeeUn = replyComment.CommenterUsername, replyeesComment = replyComment.Comment }, null)
                                </div>
                            </div>
                        }
                    }
                }
            }
        }
    </div>
}
