@model List<Site.Storage.Models.CommentEntity>
           @using Site.Controllers
@Styles.Render("~/Content/css")

@section MetaTags
{
    @Html.Partial("_DefaultMetaTags")
}

@{
    Layout = "";
}

@if (@Model.Select(x => x.PollOptionKey).Count() != 0)
{

    <h1 class="comment-box-title">Voter Comments</h1>

    if (Model.Where(x => x.AmIAReply == false).Select(x => x.PollOptionKey).Distinct().Count() <= 2)
    {
        var Op1 = Model.Where(x => x.AmIAReply == false).Select(x => x.PollOptionKey).Distinct().First();
        var decodedOp1 = HttpUtility.UrlDecode(Op1);
        var Op2 = Model.Where(x => x.AmIAReply == false).Select(x => x.PollOptionKey).Distinct().Last();
        var decodedOp2 = HttpUtility.UrlDecode(Op2);

        <div class="comment-box-sbs-1">
            <h3>People who voted for @decodedOp1 say:</h3>
            @foreach (var voteComment in Model.Select((value, i) => new { i, value }))
            {
                if (@voteComment.value.PollOptionKey == Op1 && voteComment.value.AmIAReply == false)
                {
                    <h3>@Html.ActionLink(voteComment.value.Commenter, "AuthorStories", new { Auth = @voteComment.value.CommenterUsername }, null)</h3>
                    @voteComment.value.Timestamp.ToString("g")

                    <p> @StoriesController.GetPrettyDate(voteComment.value.Timestamp)</p>

                    <p style="white-space:pre-wrap;">@voteComment.value.Comment</p>
    @Html.ActionLink("REPLY", "StoriesComment", new { replyId = voteComment.value.CommentId, replyee = voteComment.value.Commenter, replyeeUn = voteComment.value.CommenterUsername }, null)
                    foreach (var replyComment in Model.OrderBy(x => x.RowKey))
                    {
                        if (replyComment.CommentId == Model.Select(x => x.CommentId).ElementAt(voteComment.i) && replyComment.AmIAReply == true)
                        {
                            <div style="margin-left: 50px">
                                @{var decodedReplyOp = HttpUtility.UrlDecode(replyComment.PollOptionKey);}
                                <h4>@Html.ActionLink(@replyComment.Commenter, "AuthorStories", new { Auth = @replyComment.CommenterUsername }, null) voted @decodedReplyOp replied to @Html.ActionLink(@replyComment.WhoDidIReply, "AuthorStories", "Stories", new { Auth = @replyComment.WhoDidIReplyUsername }, null)</h4>
                                <h6>@replyComment.Timestamp.ToString("g")</h6>
                                <p style="white-space:pre-wrap;">@replyComment.Comment @replyComment.CommentId</p>
                                @Html.ActionLink("REPLY", "StoriesComment", new { replyId = @replyComment.CommentId, replyee = replyComment.Commenter, replyeeUn = replyComment.CommenterUsername }, null)
                            </div>
                        }
                    }
                }
            }
        </div>
        if (Model.Where(x => x.AmIAReply == false).Select(x => x.PollOptionKey).Distinct().Count() > 1)
        {
            <div class="comment-box-sbs-2">
                <h3>People who voted for @decodedOp2 say:</h3>
                @foreach (var voteComment in Model.Select((value, i) => new { i, value }))
                {
                    if (voteComment.value.PollOptionKey == Op2 && voteComment.value.AmIAReply == false)
                    {
                        <h3>@Html.ActionLink(@voteComment.value.Commenter, "AuthorStories", new { Auth = @voteComment.value.CommenterUsername }, null)</h3> @voteComment.value.Timestamp.ToString("g")
                        <p style="white-space:pre-wrap;">@voteComment.value.Comment </p>
    @Html.ActionLink("REPLY", "StoriesComment", new { replyId = voteComment.value.CommentId, replyee = voteComment.value.Commenter, replyeeUn = voteComment.value.CommenterUsername }, null)
                        foreach (var replyComment in Model.OrderBy(x => x.RowKey))
                        {
                            if (replyComment.CommentId == Model.Select(x => x.CommentId).ElementAt(voteComment.i) && replyComment.AmIAReply == true)
                            {
                                <div style="margin-left: 50px">
                                    @{var decodedReplyOp = HttpUtility.UrlDecode(replyComment.PollOptionKey);}
                                    <h4>@Html.ActionLink(@replyComment.Commenter, "AuthorStories", new { Auth = @replyComment.CommenterUsername }, null) voted @decodedReplyOp replied to @Html.ActionLink(@replyComment.WhoDidIReply, "AuthorStories", "Stories", new { Auth = @replyComment.WhoDidIReplyUsername }, null) </h4>
                                    <h6>@replyComment.Timestamp</h6>
                                    <p style="white-space:pre-wrap;">@replyComment.Comment @replyComment.CommentId</p>
                                    @Html.ActionLink("REPLY", "StoriesComment", new { replyId = @replyComment.CommentId, replyee = replyComment.Commenter, replyeeUn = replyComment.CommenterUsername }, null)
                                </div>
                            }
                        }
                    }
                }
            </div>
        }
    }

    else
    {
        foreach (var voteComment in Model.Select((value, i) => new { i, value }))
        {
            if (voteComment.value.AmIAReply == false)
            {
                var decodedOp = HttpUtility.UrlDecode(voteComment.value.PollOptionKey);
                <h4>@Html.ActionLink(@voteComment.value.Commenter, "AuthorStories", new { Auth = @voteComment.value.CommenterUsername }, null) voted @decodedOp</h4>
                <h6>@voteComment.value.Timestamp.ToString("g")</h6>
                <p style="white-space:pre-wrap;">@voteComment.value.Comment @voteComment.value.CommentId</p>
    @Html.ActionLink("REPLY", "StoriesComment", new { replyId = voteComment.value.CommentId, replyee = voteComment.value.Commenter, replyeeUn = voteComment.value.CommenterUsername }, null)
                foreach (var replyComment in Model.OrderBy(x => x.RowKey))
                {
                    if (replyComment.CommentId == Model.Select(x => x.CommentId).ElementAt(voteComment.i) && replyComment.AmIAReply == true)
                    {
                        <div style="margin-left: 50px">
                            @{var decodedReplyOp = HttpUtility.UrlDecode(replyComment.PollOptionKey);}
                            <h4>@Html.ActionLink(@replyComment.Commenter, "AuthorStories", new { Auth = @replyComment.CommenterUsername }, null) voted @decodedReplyOp replied to @Html.ActionLink(@replyComment.WhoDidIReply, "AuthorStories", "Stories", new { Auth = @replyComment.WhoDidIReplyUsername }, null)</h4>
                            <h6>@replyComment.Timestamp.ToString("g")</h6>
                            <p style="white-space:pre-wrap;">@replyComment.Comment @replyComment.CommentId</p>
                            @Html.ActionLink("REPLY", "StoriesComment", new { replyId = @replyComment.CommentId, replyee = replyComment.Commenter, replyeeUn = replyComment.CommenterUsername }, null)
                        </div>
                    }
                }
            }
        }
    }



}