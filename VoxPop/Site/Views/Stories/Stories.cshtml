@using Site.Models
@using Site.Services
@using Site.Storage.Models;
@model BlogModel
@{
    ViewBag.Title = @Model.Title;
}

@section MetaTags
{
    @Html.Partial("_MetaTags", new MetaTagModel { Description = Model.Content.StripHtmlTags(), Title = Model.Title, ImageUri = Model.ImageUri })
}
<script src="~/Scripts/modally-baby.js"></script>
<script src="~/Scripts/vote-ops.js"></script>
<script src="~/Scripts/percent-tooltips.js"></script>
<script>
    var chartData = [];
</script>
<div id="story-share" style="display: block;"></div>
<h1 id="story-headings" class="story-headings">
    @Model.Title
    @Html.Action("_IfIAmAResponseBox", "Stories", new { articleIdentifier = Model.BlogIdentifier, authorIdentifier = Model.AuthorIdentifier })
</h1>
<div class="story-outer-width">
    <div class="story-outer-space-left">
        <div class="story-author-date-box">
            <p class="story-author">by @Html.ActionLink(@Model.Author, "AuthorStories", "Stories", new { AuthUn = @Model.AuthorIdentifier, Auth = Model.Author }, null)</p>
            <p class="story-date"> @Model.TimeCreated.ToString("D")</p>
        </div>

        <p class="story-interact">
            @Html.ActionLink("COMMENT", "StoriesComment", new { articleIdentifier = @Model.BlogIdentifier, authorIdentifier = @Model.AuthorIdentifier })
        </p>
        <p class="story-interact">
            @Html.ActionLink("RESPOND", "CreateResponse", new
                {
                    replyeeTitle = Model.Title,
                    replyee = Model.Author,
                    replyeeBlogIdentifier = Model.BlogIdentifier,
                    replyeeIdentifier = Model.AuthorIdentifier
                })
        </p>
        <p class="story-interact">
            @if ((Request.IsAuthenticated) && (Site.Services.ClaimsService.GetClaim(VoxPopConstants.IdentifierClaimKey) == @Model.AuthorIdentifier))
            {
                @Html.ActionLink("EDIT", "Edit", new { articleIdentifier = @Model.BlogIdentifier, authorIdentifier = @Model.AuthorIdentifier })
            }
        </p>
    </div>
    <div class="story-width">
        <img src="@Model.ImageUri" class="story-pic">
        <div>
            <div class="story-chart-box">
                <div id="story-chart" class="story-chart">
                    <canvas class="story-chart-canvas" id="storyChart" height="345" width="666"></canvas>
                </div>
                <h2 class="story-votebuttons-title">Vote</h2>
                <div id="story-votebuttons" class="story-votebuttons">
                    @{int count = 0;}
                    @if (Model.Poll.Count > 4)
                    {
                        for (int i = 0; i < 4; i++)
                        {
                            var poll = Model.Poll.ElementAt(i);
                            <div id="story-votebuttons-box-@count" class="story-votebuttons-box-@count story-votebuttons-boxes">
                                @{var option = @poll.Key.Trim();}
                                <h4 class="story-votebuttons-option">@option&nbsp:</h4>
                                <span id="story-votebuttons-value-@count" class="story-votebuttons-value">@poll.Value</span>
                                @using (Html.BeginForm("Vote", "Stories"))
                                {
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="pollItemKey" value="@poll.Key">
                                    <input type="hidden" name="blogPostPartitionKey" value="@Model.AuthorIdentifier">
                                    <input type="hidden" name="blogPostRowKey" value="@Model.BlogIdentifier">
                                    <input type="hidden" name="returnUrl" value="/Stories/@Model.AuthorIdentifier/@Model.BlogIdentifier">
                                    <input class="story-votebuttons-button" type="submit" value="+1">
                                }
                                <div id="story-votebuttons-box-colour-@count" class="story-votebuttons-box-colour story-votebuttons-box-colour-@count"></div>
                                @{count++;}
                            </div>
                        }
                        <a class="story-votebuttons-extra trigger" href="javascript:;">More Voting Options...</a>
                        foreach (var poll in Model.Poll)
                        {
                            <script>
                                chartData.push(VoxPopCharts.GetPollData("@poll.Key", @poll.Value));
                            </script>
                        }
                    }
                    else
                    {
                        foreach (var pollItem in Model.Poll)
                        {
                            <div class="story-votebuttons-box">

                                <div id="story-votebuttons-box-@count" class="story-votebuttons-box-@count story-votebuttons-boxes">
                                    @{var option = @pollItem.Key.Trim();}
                                    <h4 class="story-votebuttons-option">@option&nbsp:</h4>
                                    <span id="story-votebuttons-value-@count" class="story-votebuttons-value">@pollItem.Value</span>
                                    @using (Html.BeginForm("Vote", "Stories"))
                                    {
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="pollItemKey" value="@pollItem.Key">
                                        <input type="hidden" name="blogPostPartitionKey" value="@Model.AuthorIdentifier">
                                        <input type="hidden" name="blogPostRowKey" value="@Model.BlogIdentifier">
                                        <input type="hidden" name="returnUrl" value="/Stories/@Model.AuthorIdentifier/@Model.BlogIdentifier">
                                        <input class="story-votebuttons-button" type="submit" value="+1">
                                    }
                                    <div id="story-votebuttons-box-colour-@count" class="story-votebuttons-box-colour story-votebuttons-box-colour-@count"></div>
                                    @{count++;}
                                    <script>
                                        chartData.push(VoxPopCharts.GetPollData("@pollItem.Key", @pollItem.Value));
                                    </script>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="did-you-vote-partial">
                    @Html.Action("_DidYouVote", "Stories", new { blogRowKey = Model.BlogIdentifier })
                </div>
            </div>
            <div class="share-box">
                @Html.Partial("_SharingIsCaring", @Model)
            </div>
        </div>

        <p class="story-pic-caption">@Model.ImageCaption</p>
        <div class="story-content">
            @Html.Raw(Model.Content)
        </div>
        <div class="response-partial">
            @Html.Action("_ResponsesBox", "Stories", new { blogRowKey = Model.BlogIdentifier })
        </div>
        <div class="comment-partial">
            @Html.Action("_CommentsBox", "Stories", new { blogRowKey = Model.BlogIdentifier, blogPartitionKey = Model.AuthorIdentifier })
        </div>
        <div class="story-interact">
            @Html.ActionLink("COMMENT", "StoriesComment", new { articleIdentifier = Model.BlogIdentifier, authorIdentifier = Model.AuthorIdentifier })
        </div>
    </div>
</div>
<script>
    VoxPopCharts.GenerateChart("storyChart", chartData);
    var numPoll;
</script>

@Html.Partial("_ModalVoteWindow", @Model)
